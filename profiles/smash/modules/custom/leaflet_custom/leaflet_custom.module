<?php
/**
 * @file
 * Code for the Leaflet Custom Maps feature.
 */

include_once 'leaflet_custom.features.inc';

/**
 * Loads all available custom maps.
 */
function _leaflet_custom_load_all() {
  $query = new EntityFieldQuery();
  $query
	  ->entityCondition('entity_type', 'leaflet_custom_map', '=')
	  ->entityCondition('bundle', 'leaflet_custom_map', '=');
  
  $results = $query->execute();
  $maps = array();

  if(!empty($results)) {
    $maps = entity_load('leaflet_custom_map', array_keys($results['leaflet_custom_map']));
  }

  return $maps;
}

/**
 * Loads a single custom map.
 */
function _leaflet_custom_load_one($entity_id = null, $properties = array(), $fields = array()) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'leaflet_custom_map', '=')
    ->entityCondition('bundle', 'leaflet_custom_map', '=');

  if (!is_null($entity_id)) {
    $query->propertyCondition('id', $entity_id);
  }

  if (!empty($properties)) {
    foreach ($properties as $propname => $propvalue) {
      $query->propertyCondition($propname, $propvalue);
    }
  }
  if (!empty($fields)) {
    foreach ($fields as $fname => $fvalue) {
      $query->fieldCondition($fname, $fvalue);
    }
  }
  
  $results = $query->execute();
  $maps = array();

  if(!empty($results)) {
    $maps = entity_load('leaflet_custom_map', array_keys($results['leaflet_custom_map']));
    return reset($maps);
  }
  else {
    return null;
  }
}

/**
 * Implements hook_leaflet_map_info().
 *
 * Returns a list of custom maps for this module.
 */
function leaflet_custom_leaflet_map_info() {
  global $language;
  
  $langcode = LANGUAGE_NONE;

  $map_info = array();

  $map_entities = _leaflet_custom_load_all();

  foreach ($map_entities as $map_entity) {
    $map_info[$map_entity->title] = array(
      'label' => $map_entity->title,
      'description' => $map_entity->field_description[$langcode][0]['value'],
      'settings' => array(
        'minZoom' => $map_entity->field_minzoom[$langcode][0]['value'],
        'maxZoom' => $map_entity->field_maxzoom[$langcode][0]['value'],
        'dragging' => TRUE,
        'touchZoom' => TRUE,
        'scrollWheelZoom' => TRUE,
        'doubleClickZoom' => TRUE,
        'zoomControl' => TRUE,
        'attributionControl' => TRUE,
        'trackResize' => TRUE,
        'fadeAnimation' => TRUE,
        'zoomAnimation' => TRUE,
        'closePopupOnClick' => TRUE,
      ),
      'layers' => array(
        'earth' => array(
          'urlTemplate' => $map_entity->field_url_template[$langcode][0]['value'],
          'options' => array(
            'attribution' => $map_entity->field_attribution[$langcode][0]['value'],
          ),
        ),
      ),
      'additional' => array(
        'layers' => array(
          'earth' => array(
            'options' => array(
              'tms' => TRUE,
              'continuousWorld' => TRUE,
              'noWrap' => TRUE,
            ),
          ),
        ),
      ),
      'leaflet_custom_map_entity_id' => $map_entity->id,
    );
  }

  return $map_info;
}

/**
 * Implements hook_leaflet_map_prebuild_alter().
 * Invoked by leaflet_build_map().
 */
function leaflet_custom_leaflet_map_prebuild_alter(&$settings) {
  if (isset($settings['map']['additional'])) {
    foreach ($settings['map']['additional'] as $item_key => $values) {
      $settings['map'][$item_key] = array_merge_recursive(
        $settings['map'][$item_key],
        $values
      );
    }
  }
}

/**
 * Create new custom map type
 */
function leaflet_custom_create_map_entity($base = array()) {
  $entity_type = "leaflet_custom_map";
  $entity = entity_create($entity_type, array('type' => "leaflet_custom_map"));
  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  if (!empty($base['properties'])) {
    foreach ($base['properties'] as $propname => $propvalue) {
      $wrapper->{$propname} = $propvalue;
    }
  }
  if (!empty($base['content'])) {
    foreach ($base['content'] as $contname => $contvalue) {
      $wrapper->{$contname}->set($contvalue);
    }
  }
  $wrapper->save();
  return $wrapper;
}